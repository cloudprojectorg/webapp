# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/


# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

package-lock.json

.DS_Store

*.swp
**/vendor/
**/node_modules/
**/bin
**/.vscode/**/*
**/.vs/
**/.ionide/
**/.idea/
**/.DS_Store
coverage.cov
*.coverprofile
**/obj/
coverage/
venv/
.envrc

# Ignore user-provided go.work files.
/go.work
/go.work.sum

**/.idea/
*.iml
.yarn
# VSCode creates this binary when running tests in the debugger
**/debug.test

# Check in vscode settings for this workspace. This is so we can save common settings like setting go build tags to use by default.
!**/.vscode/settings.json

# Go tests run "in tree" and this folder will linger if they fail (the integration test framework cleans
# it up when they pass.)
**/command-output/

# Likewise, we don't want to keep the typechecked version of our codegen tests.
pkg/codegen/testing/test/testdata/*/typecheck/**

# We don't need to keep testing python __pycache__ either either
pkg/codegen/testing/test/testdata/*-pp/*/*.csproj
pkg/codegen/testing/test/testdata/*-pp/*/go.mod
pkg/codegen/testing/test/testdata/*-pp/*/go.sum
pkg/codegen/testing/test/testdata/*-pp/*/Program.cs
pkg/codegen/testing/test/testdata/*-pp/*/package.json
pkg/codegen/testing/test/testdata/*-pp/*/go.sum
pkg/codegen/testing/test/testdata/*-pp/*/tsconfig.json

# By default, we don't check in yarn.lock files
**/yarn.lock

# By default, we don't check in Pipfile.lock files
**/Pipfile.lock

# Turning on MyPy in VSCode creates this workspace local folder
.mypy_cache

# for goreleaser
**/*.exe
goreleaser
pulumi-resource-pulumi-nodejs
pulumi-resource-pulumi-python
pulumi-analyzer-policy
pulumi-analyzer-policy-python
pulumi-language-python-exec
pulumi-resource-pulumi-nodejs.cmd
pulumi-resource-pulumi-python.cmd
pulumi-python3-shim.cmd
pulumi-python-shim.cmd
pulumi-analyzer-policy.cmd
pulumi-analyzer-policy-python.cmd
artifacts/
goreleaser-downloads/
goreleaser-prebuilt/
goreleaser-lang/
goreleaser-linux/
goreleaser-darwin/
goreleaser-windows/

__pycache__
.pytest_cache

# File targets for make
*.phony

# Temporary files
*.tmp
test-results/
yarn-error.log

.DS_Store
.vscode/

